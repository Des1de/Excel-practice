// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mvc.Migrations
{
    [DbContext(typeof(ExcelDbContext))]
    partial class ExcelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountEntity", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClosingBalanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OpeningBalanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TurnoverId")
                        .HasColumnType("uuid");

                    b.HasKey("AccountId");

                    b.HasIndex("ClassId");

                    b.HasIndex("ClosingBalanceId")
                        .IsUnique();

                    b.HasIndex("OpeningBalanceId")
                        .IsUnique();

                    b.HasIndex("TurnoverId")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("ClassEntity", b =>
                {
                    b.Property<Guid>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClassNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("ClassId");

                    b.HasIndex("TableId");

                    b.ToTable("Classes", (string)null);
                });

            modelBuilder.Entity("ClosingBalanceEntity", b =>
                {
                    b.Property<Guid>("ClosingBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Active")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Passive")
                        .HasColumnType("numeric");

                    b.HasKey("ClosingBalanceId");

                    b.ToTable("ClosingBalances", (string)null);
                });

            modelBuilder.Entity("OpeningBalanceEntity", b =>
                {
                    b.Property<Guid>("OpeningBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Active")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Passive")
                        .HasColumnType("numeric");

                    b.HasKey("OpeningBalanceId");

                    b.ToTable("OpeningBalances", (string)null);
                });

            modelBuilder.Entity("TableEntity", b =>
                {
                    b.Property<Guid>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TableId");

                    b.ToTable("Tables", (string)null);
                });

            modelBuilder.Entity("TurnoverEntity", b =>
                {
                    b.Property<Guid>("TurnoverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric");

                    b.HasKey("TurnoverId");

                    b.ToTable("Turnovers", (string)null);
                });

            modelBuilder.Entity("AccountEntity", b =>
                {
                    b.HasOne("ClassEntity", null)
                        .WithMany("Accounts")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClosingBalanceEntity", "ClosingBalance")
                        .WithOne()
                        .HasForeignKey("AccountEntity", "ClosingBalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpeningBalanceEntity", "OpeningBalance")
                        .WithOne()
                        .HasForeignKey("AccountEntity", "OpeningBalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurnoverEntity", "Turnover")
                        .WithOne()
                        .HasForeignKey("AccountEntity", "TurnoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClosingBalance");

                    b.Navigation("OpeningBalance");

                    b.Navigation("Turnover");
                });

            modelBuilder.Entity("ClassEntity", b =>
                {
                    b.HasOne("TableEntity", null)
                        .WithMany("Classes")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassEntity", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("TableEntity", b =>
                {
                    b.Navigation("Classes");
                });
#pragma warning restore 612, 618
        }
    }
}
